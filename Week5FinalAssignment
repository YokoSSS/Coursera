*****STEP1*****
Assignment Overview
cognitiveclass.ai logo
Story
Components of the report items
Expected layout
Requirements to create the dashboard
What is new in this exercise compared to other labs?
Review
Hints to complete TODOs
Estimated time needed: 45 minutes

*****STEP2*****
About Skills Network Cloud IDE
スキルネットワーク・クラウドIDEについて
This Skills Network Labs Cloud IDE (Integrated Development Environment) provides a hands-on environment in 
your web browser for completing course and project related labs. It utilizes Theia, an open-source IDE platform, 
that can be run on desktop or on the cloud. So far in the course you have been using Jupyter notebooks to run your 
python code. This IDE provides an alternative for editing and running your Python code. In this lab you will be 
using this alternative Python runtime to create and launch your Dash applications.
このSkills Network Labs Cloud IDE（統合開発環境）は、コースやプロジェクト関連のラボを完了するためのハンズオン環境を
ウェブブラウザで提供します。オープンソースのIDEプラットフォームであるTheiaを利用しており、デスクトップまたはクラウド上で実行
することができます。これまでのコースでは、Jupyterノートブックを使ってpythonコードを実行してきました。このIDEは、Pythonコード
の編集と実行のための代替手段を提供します。このラボでは、この代替のPythonランタイムを使用して、Dashアプリケーションを作成し、
起動することになります。

Important Notice about this lab environment
このラボ環境に関する重要なお知らせ
Please be aware that sessions for this lab environment are not persisted. When you launch the Cloud IDE, 
you are presented with a 'dedicated computer on the cloud' exclusively for you. This is available to you as 
long as you are actively working on the labs.
このラボ環境のセッションは永続化されませんので、ご注意ください。クラウドIDEを起動すると、あなた専用の「クラウド上の専用
コンピュータ」が表示されます。これは、あなたがラボでアクティブに作業している限り、利用可能です
Once you close your session or it is timed out due to inactivity, you are logged off, and this 'dedicated computer 
on the cloud' is deleted along with any files you may have created, dowloaded or installed. The next time you 
launch this lab, a new environment is created for you.
セッションを閉じるか、非アクティブのためタイムアウトすると、ログオフされ、この「クラウド上の専用コンピュータ」は、
作成、ダウンロード、インストールしたすべてのファイルとともに削除されます。次にこのラボを起動するときは、
新しい環境が作成されます。


If you finish only part of the lab and return later, you may have to start from the beginning. So, it is a 
good idea to plan to your time accordingly and finish your labs in a single session.
もし、ラボの一部分だけを終えて、後で戻ってくると、最初からやり直さなければならないかもしれません。
ですから、時間的な余裕を持って計画を立て、1回のセッションでラボを終わらせるのがよいでしょう。

*****STEP3*****
Story:
As a data analyst, you have been given a task to monitor and report US domestic airline flights performance. Goal is to analyze the performance 
of the reporting airline to improve flight reliability thereby improving customer reliability.
あなたはデータ アナリストとして、米国国内線のフライトのパフォーマンスを監視して報告するタスクを与えられています。
目標は、報告している航空会社のパフォーマンスを分析してフライトの信頼性を向上させ、それによって顧客の信頼性を向上させることです。

Below are the key report items,
以下は、主要なレポート項目です。

Yearly airline performance report 
年次航空会社業績報告書
Yearly average flight delay statistics
年平均フライト遅延統計 
NOTE: Year range is between 2005 and 2020.
注: 年の範囲は 2005 年から 2020 年です。

Components of the report items
報告事項の構成要素

1.Yearly airline performance report
航空会社業績報告書（年1回
For the chosen year provide,
選択した年について提供する。

・Number of flights under different cancellation categories using bar chart.
棒グラフを使用した、異なるキャンセル区分のフライト数。
・Average flight time by reporting airline using line chart.
折れ線グラフを用いた報告航空会社ごとの平均飛行時間。
・Percentage of diverted airport landings per reporting airline using pie chart.
円グラフを用いた報告航空会社ごとの迂回空港への着陸のパーセンテージ。
・Number of flights flying from each state using choropleth map.
各州からのフライト数（地図上）。
・Number of flights flying to each state from each reporting airline using treemap chart.
ツリーマップを使用した各報告航空会社から各州へのフライト数。

2.Yearly average flight delay statistics
年平均フライト遅延統計

For the chosen year provide,
選択した年について提供する。

Monthly average carrier delay by reporting airline for the given year.
当該年の航空会社による月平均の遅延時間。
Monthly average weather delay by reporting airline for the given year.
当該年度の航空会社による月平均の天候による遅延。
Monthly average national air system delay by reporting airline for the given year.
当該年度の報告航空会社による月平均の国家航空システム遅延。
Monthly average security delay by reporting airline for the given year.
当該年度の報告航空会社による月平均の保安検査遅延。
Monthly average late aircraft delay by reporting airline for the given year.
当該年度の報告航空会社による月平均の遅発航空機遅延。
NOTE: You have worked created the same dashboard components in Flight Delay Time Statistics Dashboard section. We will be reusing the same.
注：「フライト遅延時間統計ダッシュボード」セクションで、同じダッシュボード・コンポーネントを作成しました。同じものを再利用する予定です。

Expected Layout　期待されるレイアウト


Requirements to create the expected result
期待通りの結果を出すための条件
Two dropdown menus: For choosing report type and year
2つのドロップダウンメニュー。レポートの種類と年度を選択するためのもの
Each dropdown will be designed as follows:
各ドロップダウンは以下のようにデザインされます。
An outer division with two inner divisions (as shown in the expected layout)
外側の分割と2つの内側の分割(予想されるレイアウトのとおり)
One of the inner divisions will have information about the dropdown and the other one is dropdown.
内側分割の1つはドロップダウンに関する情報を持ち、もう1つはドロップダウンとなります。
Layout for adding graphs.
グラフを追加するためのレイアウト。
Callback function to compute data, create graph and return to the layout.
データを計算し、グラフを作成し、レイアウトに戻るコールバック関数。


STEP4
Get the application skeleton
アプリケーションのスケルトンを取得する
Copy and paste the below command in the terminal to download the skeleton.
以下のコマンドをコピーして端末に貼り付け、スケルトンをダウンロードします。
wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/labs/Module%205/5_Peer_Graded_Assignment_Questions.py


Open 5_Peer_Graded_Assignment_Questions.py

# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output, State
import plotly.graph_objects as go
import plotly.express as px
from dash import no_update


# Create a dash application
app = dash.Dash(__name__)

# REVIEW1: Clear the layout and do not display exception till callback gets executed
app.config.suppress_callback_exceptions = True

# Read the airline data into pandas dataframe
airline_data =  pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/airline_data.csv', 
                            encoding = "ISO-8859-1",
                            dtype={'Div1Airport': str, 'Div1TailNum': str, 
                                   'Div2Airport': str, 'Div2TailNum': str})


# List of years 
year_list = [i for i in range(2005, 2021, 1)]

"""Compute graph data for creating yearly airline performance report 

Function that takes airline data as input and create 5 dataframes based on the grouping condition to be used for plottling charts and grphs.

Argument:
     
    df: Filtered dataframe
    
Returns:
   Dataframes to create graph. 
"""
def compute_data_choice_1(df):
    # Cancellation Category Count
    bar_data = df.groupby(['Month','CancellationCode'])['Flights'].sum().reset_index()
    # Average flight time by reporting airline
    line_data = df.groupby(['Month','Reporting_Airline'])['AirTime'].mean().reset_index()
    # Diverted Airport Landings
    div_data = df[df['DivAirportLandings'] != 0.0]
    # Source state count
    map_data = df.groupby(['OriginState'])['Flights'].sum().reset_index()
    # Destination state count
    tree_data = df.groupby(['DestState', 'Reporting_Airline'])['Flights'].sum().reset_index()
    return bar_data, line_data, div_data, map_data, tree_data


"""Compute graph data for creating yearly airline delay report

This function takes in airline data and selected year as an input and performs computation for creating charts and plots.

Arguments:
    df: Input airline data.
    
Returns:
    Computed average dataframes for carrier delay, weather delay, NAS delay, security delay, and late aircraft delay.
"""
def compute_data_choice_2(df):
    # Compute delay averages
    avg_car = df.groupby(['Month','Reporting_Airline'])['CarrierDelay'].mean().reset_index()
    avg_weather = df.groupby(['Month','Reporting_Airline'])['WeatherDelay'].mean().reset_index()
    avg_NAS = df.groupby(['Month','Reporting_Airline'])['NASDelay'].mean().reset_index()
    avg_sec = df.groupby(['Month','Reporting_Airline'])['SecurityDelay'].mean().reset_index()
    avg_late = df.groupby(['Month','Reporting_Airline'])['LateAircraftDelay'].mean().reset_index()
    return avg_car, avg_weather, avg_NAS, avg_sec, avg_late


# Application layout
app.layout = html.Div(children=[ 
                                # TASK1: Add title to the dashboard
                                # Enter your code below. Make sure you have correct formatting.
    
                                # REVIEW2: Dropdown creation
                                # Create an outer division 
                                html.Div([
                                    # Add an division
                                    html.Div([
                                        # Create an division for adding dropdown helper text for report type
                                        html.Div(
                                            [
                                            html.H2('Report Type:', style={'margin-right': '2em'}),
                                            ]
                                        ),
                                        # TASK2: Add a dropdown
                                        # Enter your code below. Make sure you have correct formatting.
                                        
                                    # Place them next to each other using the division style
                                    ], style={'display':'flex'}),
                                    
                                   # Add next division 
                                   html.Div([
                                       # Create an division for adding dropdown helper text for choosing year
                                        html.Div(
                                            [
                                            html.H2('Choose Year:', style={'margin-right': '2em'})
                                            ]
                                        ),
                                        dcc.Dropdown(id='input-year', 
                                                     # Update dropdown values using list comphrehension
                                                     options=[{'label': i, 'value': i} for i in year_list],
                                                     placeholder="Select a year",
                                                     style={'width':'80%', 'padding':'3px', 'font-size': '20px', 'text-align-last' : 'center'}),
                                            # Place them next to each other using the division style
                                            ], style={'display': 'flex'}),  
                                          ]),
                                
                                # Add Computed graphs
                                # REVIEW3: Observe how we add an empty division and providing an id that will be updated during callback
                                html.Div([ ], id='plot1'),
    
                                html.Div([
                                        html.Div([ ], id='plot2'),
                                        html.Div([ ], id='plot3')
                                ], style={'display': 'flex'}),
                                
                                # TASK3: Add a division with two empty divisions inside. See above disvision for example.
                                # Enter your code below. Make sure you have correct formatting.
                               
                                ])

# Callback function definition
# TASK4: Add 5 ouput components
# Enter your code below. Make sure you have correct formatting.
@app.callback( [....],
               [Input(component_id='input-type', component_property='value'),
                Input(component_id='input-year', component_property='value')],
               # REVIEW4: Holding output state till user enters all the form information. In this case, it will be chart type and year
               [State("plot1", 'children'), State("plot2", "children"),
                State("plot3", "children"), State("plot4", "children"),
                State("plot5", "children")
               ])
# Add computation to callback function and return graph
def get_graph(chart, year, children1, children2, c3, c4, c5):
      
        # Select data
        df =  airline_data[airline_data['Year']==int(year)]
       
        if chart == 'OPT1':
            # Compute required information for creating graph from the data
            bar_data, line_data, div_data, map_data, tree_data = compute_data_choice_1(df)
            
            # Number of flights under different cancellation categories
            bar_fig = px.bar(bar_data, x='Month', y='Flights', color='CancellationCode', title='Monthly Flight Cancellation')
            
            # TASK5: Average flight time by reporting airline
            # Enter your code below. Make sure you have correct formatting.
            
            
            # Percentage of diverted airport landings per reporting airline
            pie_fig = px.pie(div_data, values='Flights', names='Reporting_Airline', title='% of flights by reporting airline')
            
            # REVIEW5: Number of flights flying from each state using choropleth
            map_fig = px.choropleth(map_data,  # Input data
                    locations='OriginState', 
                    color='Flights',  
                    hover_data=['OriginState', 'Flights'], 
                    locationmode = 'USA-states', # Set to plot as US States
                    color_continuous_scale='GnBu',
                    range_color=[0, map_data['Flights'].max()]) 
            map_fig.update_layout(
                    title_text = 'Number of flights from origin state', 
                    geo_scope='usa') # Plot only the USA instead of globe
            
            # TASK6: Number of flights flying to each state from each reporting airline
            # Enter your code below. Make sure you have correct formatting.
            
            
            
            # REVIEW6: Return dcc.Graph component to the empty division
            return [dcc.Graph(figure=tree_fig), 
                    dcc.Graph(figure=pie_fig),
                    dcc.Graph(figure=map_fig),
                    dcc.Graph(figure=bar_fig),
                    dcc.Graph(figure=line_fig)
                   ]
        else:
            # REVIEW7: This covers chart type 2 and we have completed this exercise under Flight Delay Time Statistics Dashboard section
            # Compute required information for creating graph from the data
            avg_car, avg_weather, avg_NAS, avg_sec, avg_late = compute_data_choice_2(df)
            
            # Create graph
            carrier_fig = px.line(avg_car, x='Month', y='CarrierDelay', color='Reporting_Airline', title='Average carrrier delay time (minutes) by airline')
            weather_fig = px.line(avg_weather, x='Month', y='WeatherDelay', color='Reporting_Airline', title='Average weather delay time (minutes) by airline')
            nas_fig = px.line(avg_NAS, x='Month', y='NASDelay', color='Reporting_Airline', title='Average NAS delay time (minutes) by airline')
            sec_fig = px.line(avg_sec, x='Month', y='SecurityDelay', color='Reporting_Airline', title='Average security delay time (minutes) by airline')
            late_fig = px.line(avg_late, x='Month', y='LateAircraftDelay', color='Reporting_Airline', title='Average late aircraft delay time (minutes) by airline')
            
            return[dcc.Graph(figure=carrier_fig), 
                   dcc.Graph(figure=weather_fig), 
                   dcc.Graph(figure=nas_fig), 
                   dcc.Graph(figure=sec_fig), 
                   dcc.Graph(figure=late_fig)]


# Run the app
if __name__ == '__main__':
    app.run_server()




You can use this as a base code to complete the task below.
これを基本コードとして使用して、以下のタスクを完了することができます。
What's new in this exercise compared to other labs?
他のラボと比較して、この演習では何が新しいのでしょうか？
Make sure the layout is clean without any default graphs or graph layouts. We will do this by 3 changes:
デフォルトのグラフやグラフレイアウトがなく、きれいなレイアウトであることを確認してください。3つの変更によってこれを行います。
Having empty html.Div and use the callback to Output the dcc.graph as the Children of that Div.
空の html.Div を用意し、その Div の Children として dcc.graph を出力するためにコールバックを使用します。

Add a state variable in addition to callback decorator input and output parameter. This will allow us to pass extra values without firing the callbacks. Here, we need to pass two inputs chart type and year. Input is read only after user entering all the information.
Use new html display style flex to arrange the dropdown menu with description.
コールバックのデコレータの入力と出力のパラメータに加え、ステート変数を追加します。これにより、コールバックを起動することなく、追加の値を渡すことができるようになります。ここでは、チャートの種類と年の2つの入力を渡す必要がある。入力は、ユーザーがすべての情報を入力した後にのみ読み込まれます。
新しい html 表示スタイル flex を使用して、説明付きのドロップダウンメニューを配置します。

Update app run step to avoid getting error message before initiating callback.
コールバックを開始する前にエラー メッセージが表示されないように、アプリの実行ステップを更新します。
NOTE: These steps are only for review.
注: これらの手順は確認のみを目的としています。




コールバックを開始する前にエラーメッセージが表示されないように、アプリの実行ステップを更新します。

注：これらのステップは、レビューのためのみです。



*****STEP5*****
Let's create the application
アプリケーションを作成しましょう

Review
Search/Look for Review word in the script to learn how commands are used and computations are carried out. There are 7 review items.
コマンドがどのように使用され、計算が実行されるかを学ぶために、スクリプト内のレビュー単語を検索/探します。レビュー項目は7件です

REVIEW1: Clear the layout and do not display exception till callback gets executed.
レビュー1：レイアウトをクリアし、コールバックが実行されるまで例外を表示しない。
REVIEW2: Dropdown creation.
レビュー2:ドロップダウンを作成する。
REVIEW3: Observe how we add an empty division and providing an id that will be updated during callback.
レビュー3：空の部門を追加し、コールバック中に更新されるidを提供する方法を観察する。
REVIEW4: Holding output state till user enters all the form information. In this case, it will be chart type and year.
レビュー4：ユーザーがフォームの情報をすべて入力するまで、出力状態を保持する。この場合、チャートの種類と年号が入力される。
REVIEW5: Number of flights flying from each state using choropleth
レビュー5：各州から飛んでいるフライトの数をコレオプレットを使って表示する。
REVIEW6: Return dcc.Graph component to the empty division
REVIEW6：dcc.Graphコンポーネントを空の部門に戻す。
REVIEW7: This covers chart type 2 and we have completed this exercise under Flight Delay Time Statistics Dashboard section
REVIEW7: これはチャートタイプ2をカバーしており、フライト遅延時間統計ダッシュボードセクションでこの演習を完了しました。


*****STEP6*****
Hints to complete TASKS
TASKSを完成させるためのヒント
Search/Look for TASK word in the script to identify places where you need to complete the code.
スクリプト内のTASKワードを検索/検索して、コードを完成させる必要がある場所を特定します。


*****STEP7*****
TASK1: Add title to the dashboard
TASK1: ダッシュボードにタイトルを追加する
Provide title of the dash application title as US Domestic Airline Flights Performance.
ダッシュアプリのタイトルをUS Domestic Airline Flights Performanceとして提供する。
Make the heading center aligned, set color as #503D36, and font size as 24. 
Sample: style={'textAlign': 'left', 'color': '#000000', 'font-size': 0}
Reference link
見出しを中央揃えにし、色を#503D36、フォントサイズを24に設定します。
サンプル：style={'textAlign': 'left', 'color': '#000000', 'font-size': 0}.
参考リンク
76行目あたり
'US Domestic Airline Flights Performance',
78行目あたり
style={'textAlign': 'center', 'color': '#503D36', 'font-size': 24}

*****STEP8*****
TASK2: Add a dropdown menu
TASK2: ドロップダウン メニューを追加する 
Dropdown(options=Component.UNDEFINED, value=Component.UNDEFINED, multi=Component.UNDEFINED, 
clearable=Component.UNDEFINED, searchable=Component.UNDEFINED, search_value=Component.UNDEFINED, 
placeholder=Component.UNDEFINED, disabled=Component.UNDEFINED, optionHeight=Component.UNDEFINED, 
maxHeight=Component.UNDEFINED, style=Component.UNDEFINED, className=Component.UNDEFINED, 
id=Component.UNDEFINED, loading_state=Component.UNDEFINED, persistence=Component.UNDEFINED,

92行目あたり
                                        dcc.Dropdown(id='input-type', 
                                            options=[
                                                    {'label': 'Yearly Airline Performance Report', 'value': 'OPT1'},
                                                    {'label': 'Yearly Airline Delay Report', 'value': 'OPT2'}
                                                    ],
                                            placeholder='Select a report type',
                                            style={, 'width': '80%', 'padding': '3px', 'textAlign': 'center', 'font-size': 20}),

Create a dropdown menu and add two chart options to it. Below is the skeleton:
ドロップダウン メニューを作成し、それに 2 つのチャート オプションを追加します。以下はスケルトンです。


Parameters to be updated in dcc.Dropdown:
dcc.Dropdownで更新されるパラメータ。
Set id as input-type.
入力タイプにidを設定する。

Set options to list containing dictionaries with key as label and user provided value for labels in value.
オプションを、keyをラベルとし、valueにユーザが指定したラベルの値を持つ辞書を含むリストに設定する。

1st dictionary
1番目の辞書

label: Yearly Airline Performance Report
ラベルに年間航空会社業績報告書
value: OPT1
値：OPT1
2nd dictionary
2つ目の辞書

label: Yearly Airline Delay Report
ラベルで指定します。年間航空便遅延報告書
value: OPT2
値: OPT2
Set placeholder to Select a report type.
プレースホルダーを「レポートの種類を選択する」に設定します。

Set width as 80%, padding as 3px, font size as 20px, text-align-last as center inside style parameter dictionary.
幅を 80%、パディングを 3px、フォント サイズを 20px、text-align-last をスタイル パラメータ ディクショナリ内の中央に設定します。
Reference link


*****STEP9*****

TASK3: Add a division with two empty divisions inside.
TASK3: 内部に 2 つの空の区画がある区画を追加します。
Add a division with two empty divisions inside. For reference, observe how code under REVIEW3 has been structured.
内部に 2 つの空の部門がある部門を追加します。参考までに、REVIEW3 の下のコードがどのように構成されているかを観察してください。
Provide division ids as plot4 and plot5. Display style as flex.
区画 ID を plot4 および plot5 として提供します。スタイルをフレックスとして表示します。
                            html.Div([
                                    html.Div([ ], id='plot4'),
                                    html.Div([ ], id='plot5')
                            ], style={'display': 'flex'})


*****STEP10*****

TASK4: Add 5 ouput components
TASK4: 5つの出力コンポーネントを追加する
Our layout has 5 outputs so we need to create 5 output components. Review how input components are constructed to fill in for output component.
このレイアウトには 5 つの出力があるため、5 つの出力コンポーネントを作成する必要があります。入力コンポーネントがどのように構成され、出力コンポーネントを埋めるかを確認します。

It is a list with 5 output parameters with component id and property. Here, the component property will be children as we have created empty division and passing in dcc.Graph (figure) after computation.
これは、コンポーネント ID とプロパティを持つ 5 つの出力パラメーターのリストです。ここでは、空の除算を作成し、計算後に dcc.Graph (図) を渡すため、コンポーネント プロパティは子になります。
Component ids will be plot1 , plot2, plot2, plot4, and plot5. Skeleton is provided below:
コンポーネント ID は、plot1、plot2、plot2、plot4、および plot5 になります。スケルトンは次のとおりです。

[Output(component_id='plot1', component_property='children'),
 Output(....),
 Output(....),
 Output(....),
 Output(....)]


@app.callback([Output(component_id='plot1', component_property='children'),
Output(component_id='plot2', component_property='children'),
Output(component_id='plot3', component_property='children'),
Output(component_id='plot4', component_property='children'),
Output(component_id='plot5', component_property='children')],


*****STEP11*****
TASK5: Average flight time by reporting airline
TASK5: 報告航空会社別の平均飛行時間
Create a line plot using returned dataframe line_data from the above function compute_data_choice using plotly.express. 
plotly.express を使用して、上記の関数 compute_data_choice から返されたデータフレーム line_data を使用してライン プロットを作成します。

Link for reference is here
Set:

Figure name as line_fig
Figure 名は line_fig 
Input data as line_data
データを line_data として入力
x as Month, y as AirTime, color as Reporting_Airline and title as Average monthly flight time (minutes) by airline.
 x は月、y は AirTime、色は Reporting_Airline、タイトルは航空会社別の平均月間飛行時間 (分) です。

Below is the skeleton:

figure_name = px.line(input_data, x='....', y='...', color='...', title='....')
↓
line_fig = px.line(line_data, x='Month', y='AirTime', color='Reporting_Airline', title='Average monthly flight time (minutes) by airline')
            


*****STEP12*****
TASK6: Number of flights flying to each state from each reporting airline
TASK6: 各報告航空会社から各州へ飛んでいるフライト数
Create a treemap plot using returned dataframe tree_data from the above function compute_data_choice using plotly.express. Link for reference is here
上記の関数から返されたデータフレーム tree_data を用いて、トレマッププロットを作成する。

Set

Figure name as tree_fig
図名(tree_fig)

Data as tree_data
データ(tree_data)

Path as ['DestState', 'Reporting_Airline']
Path as ['DestState', 'Reporting_Airline'] (目的地)

Values as Flights
フライト数としての値

Colors as Flights and colorcontinuousscale as 'RdBu'

Title as 'Flight count by airline to destination state'
Title as '目的地である州への航空会社ごとのフライト数'
Path as ['DestState', 'Reporting_Airline'] (目的地)
Below is the skeleton:
以下はその骨格である。

tree_fig = px.treemap(data, path=['...', '...'], 
                      values='...',
                      color='...',
                      color_continuous_scale='...',
                      title='...'
                )

tree_fig = px.treemap(tree_data, path=['DestState', 'Reporting_Airline'], 
                      values='Flights',
                      color='Flights',
                      color_continuous_scale='RdBu',
                      title='Flight count by airline to destination state'
                )


*****STEP13*****
Run the Application
アプリケーションを実行する
Firstly, install pandas and dash using the following command
まず、以下のコマンドでpandasとdashをインストールします。

python3 -m pip install pandas dash

Run the python file using the command
Pythonファイルをコマンドで実行します。

python3 5_Peer_Graded_Assignment_Questions.py

Observe the port number shown in the terminal.
ターミナルに表示されるポート番号を確認します。

Click on the Launch Application option from the side menu bar. Provide the port number and click OK
サイドメニューバーから「アプリケーションの起動」をクリックします。ポート番号を入力し、OKをクリックします。

Congratulations, you have successfully completed your application!
おめでとうございます！応募は無事終了しました。

Author
Saishruthi Swaminathan

Changelog
Date	Version	Changed by	Change Description
05-10-2021	1.0	Saishruthi	Initial version created
29-08-2022	1.1	Pratiksha Verma	Updated Screenshot
© IBM Corporation 2020. All rights reserved.


